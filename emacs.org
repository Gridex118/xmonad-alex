#+Author: Alex Rosegrid
#+Title: Emacs Configuration
#+Startup: show2levels indent

#+PROPERTY: EMACS_CONFIG_DIR .dotfiles/.emacs.d/

* Early Init Settings
:PROPERTIES:
:header-args:emacs-lisp: :tangle (concat (org-entry-get nil "EMACS_CONFIG_DIR" t) "early-init.el")
:END:

** Unclutter the GUI

This is the bare minimum customization needed to make =emacs= bearable, really. Instead of a weird
logo on a white screen with ugly horizontal and vertical bars, you get a simple white screen
instead.
/And, I guess, it enables line truncation, since I, *personally*, don't like visual lines much; oh,
and it disables cursor blinking too./

#+begin_src emacs-lisp
  (visual-line-mode nil)
  (setq-default truncate-lines t)
  (setq-default blink-cursor-mode nil)
  (setq-default inhibit-startup-screen t)

  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (scroll-bar-mode -1)
#+end_src


** (Possibly Placebo) Quick Start

*** Precompute Activation Actions
This requires running =package-quickstart-refresh= and/or =package-refresh-contents= every now and
then.
#+begin_src emacs-lisp
  (setq package-quickstart t)
#+end_src

*** Garbage Collector Tweaks
#+begin_src emacs-lisp
  (setq gc-cons-threshold (* 64 1000 1000))
  (setq read-process-output-max (* 1024 1024))
#+end_src


** A More /vim like/ Experience

The first line keeps the text in the page from jumping around while scrolling, and the second one
shows at least some of the keystrokes in the ~echo-area~.

#+begin_src emacs-lisp
  (setq scroll-conservatively 101)
  (setq echo-keystrokes .1)
#+end_src


** Miscellaneous

Don't want backup files with weird names, and *probably* useless docstring warnings
#+begin_src emacs-lisp
  (setq make-backup-files nil
        native-comp-async-report-warnings-errors 'silent
        byte-compile-warnings '(not docstrings))
#+end_src


* Init Settings
:PROPERTIES:
:header-args:emacs-lisp: :tangle (concat (org-entry-get nil "EMACS_CONFIG_DIR" t) "init.el")
:END:

** Add the MELPA Repository

#+begin_src emacs-lisp
  (require 'package)
  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
#+end_src


** Some Quality of Life Features

*** Recentf Mode
#+begin_src emacs-lisp
  (recentf-mode 1)
  (global-set-key "\C-xf" 'recentf-open-files)
#+end_src

*** Electric Modes
#+begin_src emacs-lisp
  (electric-pair-mode)
  (setq electric-pair-inhibit-predicate 'electric-pair-conservative-inhibit)
#+end_src

*** Line Numbering
#+begin_src emacs-lisp
  (setq-default global-display-line-numbers-mode t)
  (setq-default display-line-numbers 'relative)
  (setq         column-number-mode    t)
#+end_src

*** Auto Revert Mode
#+begin_src emacs-lisp
  (auto-revert-mode 1)
#+end_src

*** Better Terminal
#+begin_src emacs-lisp
  (use-package vterm
    :ensure t)
#+end_src

*** Vim Layer
#+begin_src emacs-lisp
  (use-package evil
    :ensure t
    :init
    (setq evil-want-integration t
          evil-want-keybinding  nil)
    :config
    (evil-mode 1))
#+end_src
To make the integration a bit better,
#+begin_src emacs-lisp
  (use-package evil-collection
    :after evil
    :ensure t
    :config
    (evil-collection-init))
#+end_src
Set some sane default modes
#+begin_src emacs-lisp
  (dolist (p '((prog-mode                . normal)
               (minibuffer-mode          . emacs)
               (minibuffer-inactive-mode . emacs)
               (haskell-mode             . emacs)
               (help-mode                . emacs)
               (emacs-lisp-mode          . emacs)
               (dired-mode               . emacs)
               (vterm-mode               . emacs)
               (fundamental-mode         . emacs)))
    (evil-set-initial-state (car p) (cdr p)))
#+end_src

*** Completion and Hints
Vertico, to get a vertical list of available commands
#+begin_src emacs-lisp
  (use-package vertico
    :ensure t
    :defer  t
    :init
    (vertico-mode))
#+end_src
Marginalia, to get relevant hints/annonations about the commands.
#+begin_src emacs-lisp
  (use-package marginalia
    :ensure t
    :bind
    (:map minibuffer-local-map
                ("M-A" . marginalia-cycle))
    :init
    (marginalia-mode))
#+end_src
Corfu, for auto completion popups
#+begin_src emacs-lisp
  (use-package corfu
    :ensure t
    :defer  t
    :custom
    (corfu-cycle t)
    :init
    (global-corfu-mode)
    :config
    (setq corfu-auto t))
#+end_src
Yasnippets, for, well, snippets
#+begin_src emacs-lisp
  (use-package yasnippet
    :ensure t
    :hook prog-mode-hook
    :config
    (yas-global-mode 1))
  (use-package yasnippet-snippets
    :ensure t
    :after yasnippet)
#+end_src

*** LSP Mode
#+begin_src emacs-lisp
  (use-package lsp-mode
    :ensure t
    :hook
    (c-mode       . lsp-deferred)
    (haskell-mode . lsp-deferred)
    (c++-mode     . lsp-deferred)
    (lua-mode     . lsp-deferred))
#+end_src
*** Magit
#+begin_src emacs-lisp
    (use-package magit
      :ensure t
      :defer  t)
#+end_src


** Auto Mode Alist Settings
#+begin_src emacs-lisp
  (add-to-list 'auto-mode-alist '("\\.latex\\'" . latex-mode))
#+end_src


** UI Settings

*** A (Fairly) Good looking theme
#+begin_src emacs-lisp
  (use-package doom-themes
    :ensure t
    :config
    (setq doom-themes-enable-bold   t
          doom-themes-enable-italic t)
    (set-face-italic 'font-lock-comment-face t)
    (load-theme 'doom-city-lights t)
    (doom-themes-org-config))
#+end_src

*** Font
#+begin_src emacs-lisp
  (custom-set-faces
   '(default ((t (:family "JetBrains Mono" :foundry "JB" :slant normal :weight regular :height 143 :width normal)))))
#+end_src

*** A Better Looking Modeline
#+begin_src emacs-lisp
  (use-package doom-modeline
    :ensure t
    :init
    (doom-modeline-mode 1))
  (use-package all-the-icons
    :ensure t
    :after  doom-modeline)
#+end_src

*** Better Highlighting
#+begin_src emacs-lisp
  (use-package rainbow-blocks
    :ensure t
    :hook
    (prog-mode       . rainbow-delimiters-mode)
    (emacs-lisp-mode . rainbow-identifiers-mode))
#+end_src


** Org Mode

*** Performance Improvements
Otherwise, at least on my system, entering text in the code blocks is *slow*.
#+begin_src emacs-lisp
  (add-hook 'org-mode-hook
            (lambda() (setq jit-lock-defer-time 0.15)))
#+end_src

*** LaTeX Export Settings
#+begin_src emacs-lisp
  (add-hook 'org-mode-hook
            (lambda()
              (setq org-latex-src-block-backend 'listing
                    org-lagex-listings-options  '(("numbers" "left")
                                                  ("breaklines" "true")
                                                  ("upquote" "true")
                                                  ("autogobble" "true")
                                                  ("showstringspaces" "false")
                                                  ("basicstyle" "\\ttfamily")))))
#+end_src

*** LaTeX Preview Settings
#+begin_src emacs-lisp
  (add-hook 'org-mode-hook
            (lambda()
              (setq org-preview-latex-default-process 'dvipng
                    org-startup-with-latex-preview     t)))
#+end_src

*** Org Babel Settings
#+begin_src emacs-lisp
  (add-hook 'org-mode-hook
            (lambda()
              (org-babel-do-load-languages
               'org-babel-load-languages '((emacs-lisp . t)
                                           (C . t)
                                           (shell . t)
                                           (lua . t)))))
#+end_src

*** Appearance
#+begin_src emacs-lisp
  (use-package org-bullets
    :ensure t
    :hook (org-mode . org-bullets-mode))
#+end_src
 #+begin_src emacs-lisp
    (add-hook 'org-mode-hook
              (lambda()
                (display-line-numbers-mode -1)
                (setq org-startup-indented t)))
#+end_src

*** Miscellaneous
#+begin_src emacs-lisp
  (add-hook 'org-mode-hook
            (lambda()
              (setq-local electric-pair-inhibit-predicate
                          `(lambda(c)
                             (if (char-equal c ?<) t
                               (,electric-pair-inhibit-predicate c))))))
#+end_src



** Programming

*** Superior Lisp
#+begin_src emacs-lisp
  (use-package slime
    :ensure t
    :defer  t
    :init
    (setq inferior-lisp-program "sbcl"))
#+end_src

*** Sane Indentation for the C Family
#+begin_src emacs-lisp
  (add-hook 'prog-mode-hook
            (lambda()
              (setq c-indentation-style 'k&r
                    c-basic-offset       4)))
#+end_src

*** Treesitter Settings
#+begin_src emacs-lisp
  (add-hook 'prog-mode-hook
            (lambda()
              (setq treesit-font-lock-level 4
                    c-ts-mode-indent-style 'k&r
                    c-ts-mode-indent-offset 4)))
#+end_src
Installing the treesitter parsers
#+begin_src emacs-lisp
  (setq treesit-language-source-alist
        '((cpp "https://github.com/tree-sitter/tree-sitter-cpp")
          (c "https://github.com/tree-sitter/tree-sitter-c")
          (bash "https://github.com/tree-sitter/tree-sitter-bash")))
#+end_src
