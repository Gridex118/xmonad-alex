#+Author: Alex Rosegrid
#+Title: XMonad WM Configuration
#+Startup: show3levels indent

#+PROPERTY: header-args:haskell :tangle .dotfiles/.config/xmonad/xmonad-alex-org.hs

* Language Pragmas
Need these for using regex for Manage Hook rules
#+begin_src haskell
  {-# LANGUAGE QuasiQuotes #-}
#+end_src


* Imports
** XMonad Exclusive Packages
*** The XMonad package itself
#+begin_src haskell
  import XMonad
#+end_src
*** Layout related packages
#+begin_src haskell
  import qualified XMonad.StackSet as StackSet
  import XMonad.Layout.Gaps (gaps)
  import XMonad.Layout.Spacing (spacingWithEdge)
  import XMonad.Layout.SimpleFloat (simpleFloat, shrinkText)
  import XMonad.Layout.PerWorkspace (onWorkspace)
  import XMonad.Layout.Tabbed
  import XMonad.Layout.Master (mastered)
#+end_src
*** Hook related packages
#+begin_src haskell
  import XMonad.Hooks.ManageHelpers (doCenterFloat)
  import XMonad.Hooks.ManageDocks (avoidStruts, docks)
  import XMonad.Hooks.EwmhDesktops (ewmh)
  import XMonad.Hooks.DynamicLog
  import XMonad.Hooks.StatusBar
#+end_src
*** Keymap related packages
#+begin_src haskell
  import XMonad.Util.EZConfig (additionalKeysP, removeKeysP, additionalKeys, additionalMouseBindings)
  import XMonad.Util.SpawnOnce (spawnOnce)
  import XMonad.Actions.Submap (visualSubmap, subName)
  import XMonad.Actions.GridSelect (goToSelected)
#+end_src

** Required General Packages
#+begin_src haskell
  import Data.Map (fromList)
  import Data.Monoid (Endo)
  import Text.RE.TDFA.String (RE, matched, (?=~), re)
  import System.Exit (exitSuccess)
#+end_src


* Manage Hook
** General Floating Windows
Windows that are /easier/ to configure: exactly match the X11 =WM_CLASS= Property
#+begin_src haskell
  floatingWindowClasses :: [String]
  floatingWindowClasses =
    [ "pavucontrol"
    , "Qemu-system-x86_64"
    , "feh"
    , "Gimp" ]

  myFloatingWindowClassRules :: [Query (Endo WindowSet)]
  myFloatingWindowClassRules =
    map (\wc -> className =? wc --> doCenterFloat) floatingWindowClasses
#+end_src

** Other Window Rules
Rules that require special handling, like regex matching =gimp-toolkit= and =gimp-image-window=
should be tiled. All of my Java =AWT= projects must open as floating windows, atleast until
I learn how to deal with window proportions in Java.
#+begin_src haskell
  myMiscWindowRules :: [Query (Endo WindowSet)]
  myMiscWindowRules =
    [ (role =? "gimp-toolbox" <||> role ~= [re|gimp-image-window-.*|]) --> (ask >>= doF . StackSet.sink)
    , className ~= [re|Awt.*|] --> doCenterFloat ]
    where role = stringProperty "WM_WINDOW_ROLE"
          (~=) query re = query >>= \s -> return $ matched $ s ?=~ re
#+end_src

** Manage Hook
Combine all the rules into a single =Manage Hook= to be used by XMonad
#+begin_src haskell
  myManageHook :: Query (Endo WindowSet)
  myManageHook =
    composeAll (myFloatingWindowClassRules ++ myMiscWindowRules)
#+end_src



* Layouts
** Tabbed Layout Theme
I don't know how to remove the text, so I set the foreground color the same as the
corresponding background color
#+begin_src haskell
  myTabbedTheme :: Theme
  myTabbedTheme = def { decoHeight           = 1
                       , activeBorderWidth   = 0
                       , inactiveBorderWidth = 0
                       , urgentBorderWidth   = 0
                       , decoWidth           = 1
                       , activeColor         = "#FFFFFF"
                       , inactiveColor       = "#AAAAAA"
                       , urgentColor         = "#CCCCCC"
                       , activeTextColor     = "#FFFFFF"
                       , inactiveTextColor   = "#AAAAAA"
                       , urgentTextColor     = "#CCCCCC" }
#+end_src
** Define Layouts for Workspaces
- Workspaces *9 and 8* will default to /Full Screen/ layout
- Workspace *10* will default to /floating/ layout
#+begin_src haskell
  myLayoutHook =
    onWorkspace "10" simpleFloat $
    onWorkspace "9" (avoidStruts Full ||| tiled) $
    onWorkspace "8" (avoidStruts Full ||| tiled) $
    avoidStruts $ spacingWithEdge 4 $ gaps myGapSpec commonLayouts
    where
      myGapSpec     = [(U, 3), (R, 3), (D, 3), (L, 3)]
      commonLayouts = tiled ||| mastered' ||| Full ||| Mirror tiled
      tiled         = Tall nmaster delta ratio
      nmaster       = 1
      ratio         = 1/2
      delta         = 3/100
      mastered'     = mastered (1/100) (1/2) (tabbed shrinkText myTabbedTheme)
#+end_src


* XMobar
Copied this from the WiKi, have no idea what most of these functions are
#+begin_src haskell
  myXMobarPP :: PP
  myXMobarPP = def
    { ppSep            = magenta " . "
    , ppTitleSanitize  = xmobarStrip
    , ppCurrent        = white . wrap " " "" . xmobarBorder "Top" "#8be9fd" 2
    , ppHidden         = white . wrap " " ""
    , ppHiddenNoWindow = lowWhite . wrap " " ""
    , ppOrder          = \(ws:_) -> [ws]
    , ppUrgent         = red . wrap (yellow "!") (yellow "!") }
    where
      magenta  = xmobarColor "#ff79c6" ""
      blue     = xmobarColor "#bd93f9" ""
      white    = xmobarColor "#f8f8f2" ""
      yellow   = xmobarColor "#f1fa8c" ""
      red      = xmobarColor "#ff5555" ""
      lowWhite = xmobarColor "#bbbbbb" ""
#+end_src


* Startup Applications
#+begin_src haskell
  startupApplications :: [String]
  startupApplications =
    [ "~/.cabal/bin/xmobar"
    , "picom -b"
    , "conky.sh"
    , "/usr/libexec/notification-daemon"
    , "emacs --daemon" ]

  myStartupHook :: X ()
  myStartupHook = do
    mapM_ spawnOnce startupApplications
#+end_src
