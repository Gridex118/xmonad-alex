#+Author: Alex Rosegrid
#+Title: Emacs Configuration
#+Startup: show2levels indent

* Early Init Settings
:PROPERTIES:
:header-args:emacs-lisp: :tangle early-init.el
:END:

** Unclutter the GUI

This is the bare minimum customization needed to make =emacs= bearable, really. Instead of a weird
logo on a white screen with ugly horizontal and vertical bars, you get a simple white screen
instead.
/And, I guess, it enables line truncation, since I, *personally*, don't like visual lines much; oh,
and it disables cursor blinking too./

#+begin_src emacs-lisp
  (visual-line-mode nil)
  (setq-default truncate-lines t)
  (setq-default blink-cursor-mode nil)
  (setq-default inhibit-startup-screen t)

  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (scroll-bar-mode -1)
#+end_src


** (Possibly Placebo) Quick Start

*** Precompute Activation Actions
This requires running =package-quickstart-refresh= and/or =package-refresh-contents= every now and
then.
#+begin_src emacs-lisp
  (setq package-quickstart t)
#+end_src

*** Garbage Collector Tweaks
#+begin_src emacs-lisp
  (setq gc-cons-threshold (* 64 1000 1000))
  (setq read-process-output-max (* 1024 1024))
#+end_src


** A More /vim like/ Experience

The first line keeps the text in the page from jumping around while scrolling, and the second one
shows at least some of the keystrokes in the ~echo-area~.

#+begin_src emacs-lisp
  (setq scroll-conservatively 101)
  (setq echo-keystrokes .1)
#+end_src


** Miscellaneous

#+begin_src emacs-lisp
  (setq make-backup-files nil)
#+end_src


* Init Settings
:PROPERTIES:
:header-args:emacs-lisp: :tangle init.el
:END:

** Add the MELPA Repository

#+begin_src emacs-lisp
  (require 'package)
  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
#+end_src


** Some Quality of Life Features

*** Recentf Mode
#+begin_src emacs-lisp
  (recentf-mode 1)
  (global-set key "\C-xf" 'recentf-open-files)
#+end_src

*** Electric Modes
#+begin_src emacs-lisp
  (electric-pair-mode)
  (setq electric-pair-inhibit-predicate 'electric-pair-conservative-inhibit)
#+end_src

*** Line Numbering
#+begin_src emacs-lisp
  (setq-default global-display-line-numbers-mode t)
  (setq-default display-line-numbers 'relative)
#+end_src

*** Auto Revert Mode
#+begin_src emacs-lisp
  (auto-revert-mode 1)
#+end_src

*** Vim Layer
#+begin_src emacs-lisp
  (use-package evil
    :ensure t
    :init
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    :config
    (evil-mode 1))
#+end_src
To make the integration a bit better,
#+begin_src emacs-lisp
  (use-package evil-collection
    :after evil
    :ensure t
    :config
    (evil-collection-init))
#+end_src



** UI Settings

*** A (Fairly) Good looking theme
#+begin_src emacs-lisp
  (use-package doom-themes
    :ensure t
    :config
    (load-theme 'doom-city-lights t)
    (doom-themes-org-config))
#+end_src


** Org Mode

*** Performance Improvements
Otherwise, at least on my system, entering text in the code blocks is *slow*.
#+begin_src emacs-lisp
  (add-hook 'org-mode-hook
            (lambda() (setq jit-lock-defer-time 0.15)))
#+end_src

*** LaTeX Export Settings
#+begin_src emacs-lisp
  (add-hook 'org-mode-hook
            (lambda()
              (setq org-latex-src-block-backend 'listing
                    org-lagex-listings-options  '(("numbers" "left")
                                                  ("breaklines" "true")
                                                  ("upquote" "true")
                                                  ("autogobble" "true")
                                                  ("showstringspaces" "false")
                                                  ("basicstyle" "\\ttfamily")))))
#+end_src

*** LaTeX Preview Settings
#+begin_src emacs-lisp
  (add-hook 'org-mode-hook
            (lambda()
              (setq org-preview-latex-default-process 'dvipng
                    org-startup-with-latex-preview     t)))
#+end_src

*** Org Babel Settings
#+begin_src emacs-lisp
  (add-hook 'org-mode-hook
            (lambda()
              (org-babel-do-load-languages
               'org-babel-load-languages '((emacs-lisp . t)
                                           (C . t)
                                           (shell . t)
                                           (lua . t))))
#+end_src

*** Appearance
#+begin_src emacs-lisp
  (add-hook 'org-mode-hook
            (lambda()
              (display-line-numbers-mode -1)
              (setq org-startup-indented t)))
#+end_src

*** Miscellaneous
#+begin_src emacs-lisp
  (add-hook 'org-mode-hook
            (lambda()
              (setq-local electric-pair-inhibit-predicate
                          `(lambda(c)
                             (if (char-equal c ?<) t
                               (,electric-pair-inhibit-predicate c))))))
#+end_src



** Programming

*** Sane Indentation for the C Family
#+begin_src emacs-lisp
  (add-hook 'prog-mode-hook
            (lambda()
              (setq c-indentation-style 'k&r
                    c-basic-offset       4)))
#+end_src

*** Treesitter Settings
#+begin_src emacs-lisp
  (add-hook 'prog-mode-hook
            (lambda()
              (setq treesit-font-lock-level 4
                    c-ts-mode-indent-style 'k&r
                    c-ts-mode-indent-offset 4)))
#+end_src
Installing the treesitter parsers
#+begin_src emacs-lisp
  (setq treesit-language-source-alist
        '((cpp "https://github.com/tree-sitter/tree-sitter-cpp")
          (c "https://github.com/tree-sitter/tree-sitter-c")
          (bash "https://github.com/tree-sitter/tree-sitter-bash")))
#+end_src
